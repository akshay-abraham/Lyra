// Copyright (C) 2025 Akshay K Rooben Abraham
/**
 * @fileoverview Flow to Generate a Chat Title (`generate-chat-title.ts`).
 * @copyright Copyright (C) 2025 Akshay K Rooben Abraham. All rights reserved.
 *
 * @description
 * This file defines a small, specialized utility flow. Its only job is to take the first
 * message of a new chat session and create a short, descriptive title for it (e.g.,
 * "Solving for x in Algebra"). This is useful for displaying a list of past
 * conversations in the chat history sidebar, making them easy to identify.
 *
 * C-like Analogy:
 * This is like a helper function in a `string_utils.c` module.
 * `char* generate_short_title(const char* first_message);`
 * It performs a single, well-defined task.
 */
'use server';

// Import necessary libraries.
// C-like analogy: #include <genkit_lib.h> and #include <zod_struct_lib.h>
import { ai } from '@/ai/genkit';
import { z } from 'genkit';

/**
 * @typedef {object} GenerateChatTitleInput
 * @description The input schema for the chat title generation flow.
 *
 * C-like Analogy: Input Struct Definition
 * ```c
 * typedef struct {
 *     char* firstMessage; // The first message sent by the user in a new chat.
 * } GenerateChatTitleInput;
 * ```
 * @property {string} firstMessage - The first message from the user in a chat session.
 */
const GenerateChatTitleInputSchema = z.object({
  firstMessage: z
    .string()
    .describe('The first message from the user in a chat session.'),
});
// Create a TypeScript "type" from the schema.
export type GenerateChatTitleInput = z.infer<
  typeof GenerateChatTitleInputSchema
>;

/**
 * @typedef {object} GenerateChatTitleOutput
 * @description The output schema for the chat title generation flow.
 *
 * C-like Analogy: Output Struct Definition
 * ```c
 * typedef struct {
 *     char* title; // The short title generated by the AI.
 * } GenerateChatTitleOutput;
 * ```
 * @property {string} title - A short, descriptive title for the chat session (5 words max).
 */
const GenerateChatTitleOutputSchema = z.object({
  title: z
    .string()
    .describe('A short, descriptive title for the chat session (5 words max).'),
});
// Create a TypeScript "type" from the schema.
export type GenerateChatTitleOutput = z.infer<
  typeof GenerateChatTitleOutputSchema
>;

/**
 * The main exported function that the application UI will call when a new
 * chat is started. It's a simple wrapper that calls the internal Genkit flow.
 *
 * @param {GenerateChatTitleInput} input - The input data, containing the first message.
 * @returns {Promise<GenerateChatTitleOutput>} A promise that resolves with the generated title.
 *
 * C-like Analogy:
 * ```c
 * // The public API function declared in a header file.
 * GenerateChatTitleOutput* generateChatTitle(GenerateChatTitleInput* input);
 * ```
 */
export async function generateChatTitle(
  input: GenerateChatTitleInput,
): Promise<GenerateChatTitleOutput> {
  // It's a simple wrapper that calls the internal Genkit flow.
  return generateChatTitleFlow(input);
}

/**
 * The AI prompt template for this flow. It's very simple: we give the
 * AI the user's first message and ask it to generate a short title based on it.
 *
 * C-like Analogy: A `printf` format string for the AI.
 * `const char* PROMPT_TEMPLATE = "Based on the following user message, generate a short title...\nMessage: %s\nTitle:";`
 */
const prompt = ai.definePrompt({
  name: 'generateChatTitlePrompt',
  input: { schema: GenerateChatTitleInputSchema }, // Input data format.
  output: { schema: GenerateChatTitleOutputSchema }, // Expected output format.
  prompt: `Based on the following user message, generate a short, descriptive title for the chat session (max 5 words).

User Message: {{{firstMessage}}}

Title:`,
});

/**
 * This is the core logic function, defining the Genkit "flow".
 * A flow is a managed, server-side function that can be logged and traced.
 *
 * @param {object} config - The flow's configuration.
 * @param {function(GenerateChatTitleInput): Promise<GenerateChatTitleOutput>} flowFunction - The async function that performs the work.
 */
const generateChatTitleFlow = ai.defineFlow(
  {
    name: 'generateChatTitleFlow',
    inputSchema: GenerateChatTitleInputSchema,
    outputSchema: GenerateChatTitleOutputSchema,
  },
  // This is the function body of the flow.
  async (input) => {
    // PSEUDOCODE:
    // 1. Call the AI with our prompt, filling in the `input` data.
    //    `result = ai_call(prompt, input);`
    //    This is an asynchronous call, so we `await` its completion.
    const { output } = await prompt(input);

    // 2. The `result.output` is guaranteed by Genkit to match our `GenerateChatTitleOutputSchema`.
    //    We can simply return it. The `!` tells TypeScript we are sure it's not null.
    return output!;
  },
);
