// Copyright (C) 2025 Akshay K Rooben abraham
/**
 * @fileoverview Generates an AI Tutor Response (`generate-ai-tutor-response.ts`)
 *
 * C-like Analogy:
 * This file is a dedicated module for the core task of the application: generating
 * a helpful, Socratic-style response to a student's problem.
 *
 * It defines the data structures (`structs`) for the input and output, the
 * prompt template given to the AI, and the main function (`flow`) that orchestrates
 * the process.
 *
 * The primary exported function is `generateAITutorResponse`.
 */
'use server';

// Import necessary libraries.
// C-like analogy: #include <genkit_lib.h> and #include <zod_struct_lib.h>
import {ai} from '@/ai/genkit';
import {z} from 'genkit';


/**
 * C-like Analogy: Input Struct Definition
 *
 * typedef struct {
 *     char* problemStatement;        // The student's question.
 *     char* systemPrompt;            // (Optional) Custom rules from the teacher.
 *     char** exampleGoodAnswers;    // (Optional) An array of good answer examples.
 * } GenerateAITutorResponseInput;
 */
const GenerateAITutorResponseInputSchema = z.object({
  problemStatement: z.string().describe('The problem statement from the student.'),
  systemPrompt: z.string().optional().describe('The system prompt to guide the AI tutor.'),
  exampleGoodAnswers: z.array(z.string()).optional().describe('Examples of good answers to guide the AI.'),
});
// Create a TypeScript "type" from the schema.
export type GenerateAITutorResponseInput = z.infer<typeof GenerateAITutorResponseInputSchema>;


/**
 * C-like Analogy: Output Struct Definition
 *
 * typedef struct {
 *     char* tutorResponse; // The final response generated by the AI.
 * } GenerateAITutorResponseOutput;
 */
const GenerateAITutorResponseOutputSchema = z.object({
  tutorResponse: z.string().describe('The AI tutor response, providing hints, analogies, and questions.'),
});
// Create a TypeScript "type" from the schema.
export type GenerateAITutorResponseOutput = z.infer<typeof GenerateAITutorResponseOutputSchema>;


/**
 * C-like Analogy: `GenerateAITutorResponseOutput* generateAITutorResponse(GenerateAITutorResponseInput* input)`
 *
 * This is the main exported function that our application UI will call. It's a clean
 * wrapper around the internal Genkit flow.
 */
export async function generateAITutorResponse(input: GenerateAITutorResponseInput): Promise<GenerateAITutorResponseOutput> {
  // It simply calls the internal flow function and returns whatever it returns.
  return generateAITutorResponseFlow(input);
}


/**
 * C-like Analogy: The AI Prompt Template (like a `printf` format string)
 *
 * This defines the instructions and data layout that we will send to the AI model.
 * The `{{{...}}}` and `{{#if ...}}` syntax is from a templating language called Handlebars.
 * It allows for conditional logic and data insertion.
 *
 * - `{{#if systemPrompt}} ... {{else}} ... {{/if}}`: This is like an if-else block. If the teacher
 *   provided a custom `systemPrompt`, we use it. Otherwise, we use the default Lyra prompt.
 * - `{{#if exampleGoodAnswers}} ... {{/each}} {{/if}}`: This is like a for loop. If there are
 *   example answers, we loop through them and list them for the AI.
 * - `{{{problemStatement}}}`: This is where the student's actual question is inserted.
 */
const prompt = ai.definePrompt({
  name: 'generateAITutorResponsePrompt',
  input: {schema: GenerateAITutorResponseInputSchema}, // Links to the input struct.
  output: {schema: GenerateAITutorResponseOutputSchema}, // Tells the AI the output struct format.
  prompt: `{{#if systemPrompt}} {{systemPrompt}} {{else}} You are Lyra, an AI tutor. Your goal is to help the student verbalize their problem and guide them towards the solution by providing hints, analogies, and questions instead of direct answers. You should never give the direct answer. Emulate the Socratic method. Be patient and encouraging. You can use Markdown for formatting, including MermaidJS for diagrams (using \`\`\`mermaid code blocks). {{/if}}\n\n{{#if exampleGoodAnswers}} Here are some examples of good answers: {{#each exampleGoodAnswers}} - {{{this}}} {{/each}} {{/if}}\n\nProblem Statement: {{{problemStatement}}}`,
});


/**
 * C-like Analogy: The Core Logic Function
 *
 * This defines the Genkit "flow", which is the main, managed server-side function.
 */
const generateAITutorResponseFlow = ai.defineFlow(
  {
    name: 'generateAITutorResponseFlow',
    inputSchema: GenerateAITutorResponseInputSchema,
    outputSchema: GenerateAITutorResponseOutputSchema,
  },
  // This is the function body of the flow.
  async input => {
    // PSEUDOCODE:
    // 1. Call the AI prompt template, filling it in with the `input` data.
    //    `result = ai_call(prompt, input);`
    //    This is an asynchronous call, so we `await` its completion.
    const {output} = await prompt(input);

    // 2. The `result.output` will automatically be in the format of our
    //    `GenerateAITutorResponseOutput` struct because we defined it in the prompt.
    //    We can just return it directly. The `!` is a TypeScript thing that means
    //    "I'm sure this value is not null".
    return output!;
  }
);
