/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts.
 * Teachers have ownership over their prompts, and users have ownership over their profile.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /teacherSettings/{settingsId}: Stores settings customized by teachers for AI tutoring, with settingsId generated as teacherId_subject.
 * - /users/{userId}/prompts/{promptId}: Stores prompts created by teachers, nested under their user ID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teachers can only create, read, update, and delete prompts they own.
 * - Listing of user profiles is disallowed for privacy.
 * - Listing of teacher settings is disallowed.
 * - `teacherId` is denormalized within the prompt document to simplify ownership checks.
 * - Assumes settingsId can be derived from teacherId and subject without user input.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId in the document.
     * @allow (get, update, delete) Authenticated user with userId matching the document ID.
     * @deny (create) If the userId in the request does not match the authenticated user's ID.
     * @deny (get, update, delete) If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

        /**
         * @description Manages teacher settings.
         * @path /teacherSettings/{settingsId}
         * @allow (create) false
         * @allow (get) false
         * @allow (update) false
         * @allow (delete) false
         * @allow (list) false
         * @principle No read/write permissions.
         */
        match /teacherSettings/{settingsId} {
          allow get: if false;
          allow list: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }

    /**
     * @description Enforces teacher-ownership for prompts within their user profile.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (create) Authenticated teacher with matching userId and correct authorId in the document.
     * @allow (get, update, delete) Authenticated teacher with userId matching the document's userId.
     * @deny (create) If the userId in the path does not match the authenticated user's ID or the authorId in the document.
     * @deny (get, update, delete) If the userId does not match the authenticated user's ID or the authorId in the document.
     * @principle Enforces document ownership for writes, requires existing document for update/delete.
     */
    match /users/{userId}/prompts/{promptId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}