/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts,
 * ensuring data privacy and integrity. It leverages Firebase Authentication to identify users and
 * authorize access to resources.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile data, accessible only to the user themselves.
 * - `/teacherSettings/{settingsId}`: Stores AI customization settings for teachers.
 * - `/users/{userId}/prompts/{promptId}`: Stores prompts created by teachers, nested under their user ID.
 *
 * @keySecurityDecisions
 * - User listing is disabled to prevent unauthorized enumeration of users.
 * - All write operations are protected by authorization checks to ensure only authenticated users
 *   can modify data and only owners can modify their own data.
 * - `teacherSettings` are publicly accessible to all authenticated users.
 *
 * @denormalizationForAuthorization
 * - The `Prompt` entity includes a `userId` field, which is a denormalized copy of the parent `userId`. This allows for efficient
 *   security rules without requiring extra `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id matches the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Teacher Settings are publicly available to all authenticated users
       * @path /teacherSettings/{settingsId}
       * @allow (get, list) Authenticated user can read and list all teacher settings.
       * @allow (create, update, delete) Authenticated user can create, update and delete only their own teacher settings.
       * @principle Authenticated users can manage their own teacher settings.
       */
    match /teacherSettings/{settingsId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

    /**
     * @description Enforces user-ownership for prompts. Only the owner (teacher) can create, read, update, or delete their own prompts.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (create) User with UID 'teacher123' can create a prompt under /users/teacher123/prompts/{promptId}.
     * @allow (get, update, delete) User with UID 'teacher123' can read, update, or delete their prompt under /users/teacher123/prompts/{promptId}.
     * @deny (create) User with UID 'student456' cannot create a prompt under /users/teacher123/prompts/{promptId}.
     * @deny (get, update, delete) User with UID 'student456' cannot read, update, or delete the prompt under /users/teacher123/prompts/{promptId}.
     * @principle Enforces document ownership for writes and validates relational integrity on creation.
     */
    match /users/{userId}/prompts/{promptId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user id matches the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}