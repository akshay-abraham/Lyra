/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts,
 * ensuring that users can only access and modify their own data. The `teacherSettings` collection
 * can only be created and managed by authenticated users. Data validation is minimized for prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Each user can only access their own profile.
 * - /teacherSettings/{settingsId}: Stores settings set by teachers, settings are public to the teacher.
 * - /users/{userId}/prompts/{promptId}: Stores prompts created by teachers. Each teacher can only access the prompts they created.
 *
 * Key Security Decisions:
 * - User listing is disallowed for `/users` to protect user privacy.
 * - Path-based ownership is enforced for all write operations, ensuring only the owner can modify data.
 * - Read operations are allowed for teacher settings for a given settings ID.
 *
 * Denormalization for Authorization:
 * - The 'userId' field is denormalized within the 'Prompt' entity to allow for direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) Allows a user to create their own profile if the UID matches the document ID.
     * @allow (get) Allows a user to get their own profile.
     * @allow (update) Allows a user to update their own profile.
     * @allow (delete) Allows a user to delete their own profile.
     * @deny (create) Denies creating a profile with a mismatched UID.
     * @deny (get) Denies getting another user's profile.
     * @deny (update) Denies updating another user's profile.
     * @deny (delete) Denies deleting another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Enforces access control for teacher settings.
     * @path /teacherSettings/{settingsId}
     * @allow (create) Allows a teacher to create settings if authenticated.
     * @allow (get) Allows a teacher to get settings if authenticated.
     * @allow (update) Allows a teacher to update settings if authenticated.
     * @allow (delete) Allows a teacher to delete settings if authenticated.
     * @deny (create) Denies creating settings if not authenticated.
     * @deny (get) Denies getting settings if not authenticated.
     * @deny (update) Denies updating settings if not authenticated.
     * @deny (delete) Denies deleting settings if not authenticated.
     * @principle Enforces authentication for all operations.
     */
    match /teacherSettings/{settingsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
      allow list: if false;
    }

    /**
     * @description Enforces access control for prompts created by teachers.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (create) Allows a teacher to create a prompt under their user ID, matching userId in the path and in the document.
     * @allow (get) Allows a teacher to get their own prompt.
     * @allow (update) Allows a teacher to update their own prompt.
     * @allow (delete) Allows a teacher to delete their own prompt.
     * @allow (list) Allows a teacher to list their own prompts.
     * @deny (create) Denies creating a prompt under another user's ID.
     * @deny (get) Denies getting another user's prompt.
     * @deny (update) Denies updating another user's prompt.
     * @deny (delete) Denies deleting another user's prompt.
     * @principle Enforces document ownership based on the userId in the path and document.
     */
    match /users/{userId}/prompts/{promptId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
    
  }
}