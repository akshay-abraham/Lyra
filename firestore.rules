/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where teachers can only access and modify their own data.
 * Firebase Authentication is used to identify users, and access control is based on the authenticated user's UID.
 *
 * Data Structure:
 * Data is organized hierarchically under `/teachers/{teacherId}`, with teacher profiles and their associated prompts.
 *
 * Key Security Decisions:
 * - Teachers can only create, read, update, and delete prompts they own.
 * - Listing all teachers is disallowed, as it could expose sensitive information.
 * - The `teacherId` is denormalized within the `Prompt` documents to avoid costly `get()` calls and ensure authorization independence.
 * - Data consistency between paths and document content is enforced to prevent unauthorized data manipulation.
 *
 * Denormalization for Authorization:
 * - The `Prompt` documents include a `teacherId` field, which is a copy of the teacher's UID. This denormalization allows rules to directly check ownership without needing to perform additional reads.
 *
 * Structural Segregation:
 * - Prompts are stored under the teacher's ID to ensure that prompts are isolated between teachers, and that list operations are safe and efficient. This prevents unauthorized access and maintains data integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided teacherId.
     */
    function isOwner(teacherId) {
      return isSignedIn() && request.auth.uid == teacherId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(teacherId) {
      return isOwner(teacherId) && resource != null;
    }

    /***************** Teacher Collection Rules *****************/

    /**
     * @description Protects the /teachers/{teacherId} collection.
     * @path /teachers/{teacherId}
     * @allow (create) User with UID 'teacher123' can create a teacher profile with ID 'teacher123'.
     * @deny (create) User with UID 'otherUser' cannot create a teacher profile with ID 'teacher123'.
     * @allow (get) User with UID 'teacher123' can get their own teacher profile with ID 'teacher123'.
     * @deny (get) User with UID 'otherUser' cannot get teacher profile with ID 'teacher123'.
     * @allow (update) User with UID 'teacher123' can update their own teacher profile with ID 'teacher123'.
     * @deny (update) User with UID 'otherUser' cannot update teacher profile with ID 'teacher123'.
     * @allow (delete) User with UID 'teacher123' can delete their own teacher profile with ID 'teacher123'.
     * @deny (delete) User with UID 'otherUser' cannot delete teacher profile with ID 'teacher123'.
     * @principle Enforces document ownership for all operations on teacher profiles.
     */
    match /teachers/{teacherId} {
      allow get: if isOwner(teacherId);
      allow list: if false; // Listing teachers is not allowed.

      // Allow the teacher to create their own profile, but enforce that the ID matches their UID.
      allow create: if isOwner(teacherId) && request.resource.data.id == teacherId;

      // Allow updates and deletes only if the user is the owner and the document exists.
      allow update: if isExistingOwner(teacherId) && request.resource.data.id == resource.data.id; //Also ensure immutability of id field
      allow delete: if isExistingOwner(teacherId);
    }

    /***************** Prompt Collection Rules *****************/

    /**
     * @description Protects the /teachers/{teacherId}/prompts/{promptId} subcollection.
     * @path /teachers/{teacherId}/prompts/{promptId}
     * @allow (create) User with UID 'teacher123' can create a prompt under /teachers/teacher123/prompts/.
     * @deny (create) User with UID 'otherUser' cannot create a prompt under /teachers/teacher123/prompts/.
     * @allow (get) User with UID 'teacher123' can get a prompt under /teachers/teacher123/prompts/.
     * @deny (get) User with UID 'otherUser' cannot get a prompt under /teachers/teacher123/prompts/.
     * @allow (update) User with UID 'teacher123' can update a prompt under /teachers/teacher123/prompts/.
     * @deny (update) User with UID 'otherUser' cannot update a prompt under /teachers/teacher123/prompts/.
     * @allow (delete) User with UID 'teacher123' can delete a prompt under /teachers/teacher123/prompts/.
     * @deny (delete) User with UID 'otherUser' cannot delete a prompt under /teachers/teacher123/prompts/.
     * @principle Enforces document ownership for all operations on prompts.
     */
    match /teachers/{teacherId}/prompts/{promptId} {
      allow get: if isOwner(teacherId);
      allow list: if isOwner(teacherId);

      // Allow creation only if the user is the owner and the teacherId field matches the path.
      allow create: if isOwner(teacherId) && request.resource.data.teacherId == teacherId;

      // Allow updates and deletes only if the user is the owner, the document exists, and the teacherId is immutable.
      allow update: if isExistingOwner(teacherId) && request.resource.data.teacherId == resource.data.teacherId;
      allow delete: if isExistingOwner(teacherId);
    }
  }
}