/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts,
 * ensuring that only the authenticated user can access or modify their own data. Teacher settings are also
 * protected with ownership checks.  The rules are designed to prevent unauthorized data access and maintain
 * data integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with each document ID matching the Firebase Auth UID.
 * - /teacherSettings/{settingsId}: Stores teacher-specific AI settings, with document IDs potentially
 *   containing composite keys (e.g., {teacherId}_{subject}).
 * - /users/{userId}/prompts/{promptId}: Stores prompts created by teachers, nested under their user ID.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; listing all user profiles is disallowed.
 * - Teacher settings are secured by teacher ID
 * - Prompts are owned by the teacher who created them and are stored under the teacher's user ID.
 * - Denormalization is used to improve rule performance and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2' can create their own profile.
     * @allow (get, update, delete) User with UID 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2' can read, update, and delete their own profile.
     * @deny (create) User with UID 'anotherUser' cannot create a profile with ID 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2'.
     * @deny (get, update, delete) User with UID 'anotherUser' cannot read, update, or delete the profile with ID 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

        match /prompts/{promptId} {
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

        match /chatSessions/{chatSessionId} {
          allow get: if isSignedIn() && isOwner(userId);
          allow list: if isSignedIn() && isOwner(userId);
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }
    }

      /**
       * @description Controls access to teacher settings documents.
       * @path /teacherSettings/{settingsId}
       * @allow (create, update, delete) Teacher with UID 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2' can create, update, and delete their own settings.
       * @allow (get, list) Any authenticated user can read teacher settings.
       * @deny (create, update, delete) User with UID 'anotherUser' cannot create, update, or delete settings for teacher 'aCm4Q76PrGOSmWsTr1XJHrjbBRP2'.
       * @principle Enforces document ownership for writes, allows public reads.
       */
      match /teacherSettings/{settingsId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
          return request.auth.uid == resource.data.teacherId;
        }

        function isCreatingOwner() {
          return request.auth.uid == request.resource.data.teacherId;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && isCreatingOwner();
        allow update: if isSignedIn() && isOwner();
        allow delete: if isSignedIn() && isOwner();
      }
  }
}