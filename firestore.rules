/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for chat sessions and messages.
 *  Each user can only read and write their own data.
 * @data_structure
 *  - /users/{userId}: Stores user profile information.
 *  - /users/{userId}/chatSessions/{chatSessionId}: Stores chat session metadata for each user.
 *  - /users/{userId}/chatSessions/{chatSessionId}/messages/{messageId}: Stores messages within a chat session.
 * @key_security_decisions
 *  - Users can only create, read, update, and delete their own chat sessions and messages.
 *  - Listing of all users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *   Request: auth.uid == 'user123', resource.data.id == 'user123'
     * @allow (get) - User with UID 'user123' can read their own profile.
     * @allow (update) - User with UID 'user123' can update their own profile.
     * @allow (delete) - User with UID 'user123' can delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123'.
     *   Request: auth.uid == 'user456', resource.data.id == 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows access to chat sessions for a specific user.
     * @path /users/{userId}/chatSessions/{chatSessionId}
     * @allow (create) - User with UID 'user123' can create a chat session in their own user path.
     * @allow (get) - User with UID 'user123' can read a chat session in their own user path.
     * @allow (update) - User with UID 'user123' can update a chat session in their own user path.
     * @allow (delete) - User with UID 'user123' can delete a chat session in their own user path.
     * @deny (create) - User with UID 'user456' cannot create a chat session in 'user123's path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chatSessions/{chatSessionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to messages within a specific chat session.
     * @path /users/{userId}/chatSessions/{chatSessionId}/messages/{messageId}
     * @allow (create) - User with UID 'user123' can create a message in their own chat session.
     * @allow (get) - User with UID 'user123' can read a message in their own chat session.
     * @allow (update) - User with UID 'user123' can update a message in their own chat session.
     * @allow (delete) - User with UID 'user123' can delete a message in their own chat session.
     * @deny (create) - User with UID 'user456' cannot create a message in 'user123's chat session.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chatSessions/{chatSessionId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

     function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}