rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists (for update/delete).
     * @param {string} userId The user ID to compare against the resource's userId.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /******************** User Profile Rules ********************/

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get) - User with matching UID can read their profile.
     * @allow (update) - User with matching UID can update their profile.
     * @allow (delete) - User with matching UID can delete their profile.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (create) - A user should not be able to create a profile for another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

     /******************** Teacher Settings Rules ********************/

    /**
     * @description Manages access to teacher settings documents.
     * @path /teacherSettings/{settingsId}
     * @allow (create) - Teacher can create their settings.
     * @allow (get) - Teacher can read their settings.
     * @allow (update) - Teacher can update their settings.
     * @allow (delete) - Teacher can delete their settings.
     * @deny (list) - Prevents listing all teacher settings.
     * @principle Enforces document ownership for all operations.
     */
    match /teacherSettings/{settingsId} {
        allow get: if isSignedIn() && settingsId == request.auth.uid;
        allow list: if false;
        allow create: if isSignedIn() && settingsId == request.auth.uid;
        allow update: if isSignedIn() && settingsId == request.auth.uid;
        allow delete: if isSignedIn() && settingsId == request.auth.uid;
    }

    /******************** Prompt Rules ********************/

    /**
     * @description Manages access to prompt documents nested under a user.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (create) - Owner can create prompts under their user ID, and the prompt's userId matches.
     * @allow (get) - Owner can read prompts under their user ID.
     * @allow (update) - Owner can update prompts under their user ID, with userId immutability enforced.
     * @allow (delete) - Owner can delete prompts under their user ID.
     * @allow (list) - Owner can list prompts under their user ID.
     * @deny (create) - Non-owner cannot create prompts under another user's ID.
     * @deny (update) - Prevents changing the userId of a prompt after creation.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/prompts/{promptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}