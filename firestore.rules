/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the Lyra application,
 *              ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each user document is only accessible
 *   by the authenticated user with the matching userId.
 * - /users/{userId}/chatSessions/{chatSessionId}: Stores chat sessions for each user.
 *   Each chat session is only accessible by the user who owns the session.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Chat sessions are nested under users, enforcing clear ownership.
 * - The `userId` field is denormalized into the ChatSession entity to allow for authorization
 *   checks without additional `get()` operations. This ensures DBAC.
 *
 * Denormalization for Authorization:
 * - The `ChatSession` entity includes a `userId` field, which is redundant but CRITICAL
 *   for authorization. This allows rules to quickly verify ownership without needing
 *   to read the parent `/users/{userId}` document.
 *
 * Structural Segregation:
 * - Private user data and chat sessions are stored under the `/users/{userId}` path,
 *   ensuring that they are not accidentally exposed publicly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their own profile.
     * @allow (get) - User with matching {userId} can retrieve their own profile.
     * @allow (update) - User with matching {userId} can update their own profile.
     * @allow (delete) - User with matching {userId} can delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - User cannot create a profile with a {userId} that does not match request.auth.uid.
     * @deny (update) - User cannot update another user's profile.
     * @deny (delete) - User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat session documents nested under a user.
     * @path /users/{userId}/chatSessions/{chatSessionId}
     * @allow (create) - User with matching {userId} can create a chat session under their profile.
     * @allow (get) - User with matching {userId} can retrieve a chat session under their profile.
     * @allow (update) - User with matching {userId} can update a chat session under their profile.
     * @allow (delete) - User with matching {userId} can delete a chat session under their profile.
     * @allow (list) - User with matching {userId} can list chat sessions under their profile.
     * @deny (create) - User cannot create a chat session with a userId that does not match request.auth.uid.
     * @deny (update) - User cannot update another user's chat session.
     * @deny (delete) - User cannot delete another user's chat session.
     * @principle Enforces document ownership for all operations on chat sessions.
     */
    match /users/{userId}/chatSessions/{chatSessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}