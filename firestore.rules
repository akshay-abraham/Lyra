/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts.
 * Only authenticated users can access their own profile data. Teachers can only access and modify the prompts they created.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with each document ID matching the Firebase Auth UID.
 * - /teacherSettings/{settingsId}: Stores teacher-specific AI settings, globally accessible to teachers.
 * - /users/{userId}/prompts/{promptId}: Stores prompts created by teachers.
 *
 * Key Security Decisions:
 * - Users can only create their own profile.
 * - Users cannot list all user profiles.
 * - Teacher settings are globally accessible by teacher role.
 *
 * Denormalization for Authorization:
 * - The `Prompt` entity includes a `userId` field, which is automatically set to the teacher's UID when the prompt is created.
 *   This denormalization allows for direct authorization checks on prompts without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - Prompts are stored as subcollections under each teacher's user document to ensure proper ownership and isolation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *    auth.uid: 'user123', request.resource.data.uid: 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile for another user 'user456'.
     *    auth.uid: 'user123', request.resource.data.uid: 'user456'
     * @allow (get) User with UID 'user123' can read their own profile.
     *    auth.uid: 'user123'
     * @deny (get) User with UID 'user123' cannot read another user's profile.
     *    auth.uid: 'user456'
     * @allow (update) User with UID 'user123' can update their own profile.
     *    auth.uid: 'user123'
     * @deny (update) User with UID 'user123' cannot update another user's profile.
     *    auth.uid: 'user456'
     * @allow (delete) User with UID 'user123' can delete their own profile.
     *    auth.uid: 'user123'
     * @deny (delete) User with UID 'user123' cannot delete another user's profile.
     *    auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure teacher settings.
     * @path /teacherSettings/{settingsId}
     * @allow (get) Any teacher can read teacher settings.
     *    auth.token.role: 'teacher'
     * @allow (list) Any teacher can list teacher settings.
     *    auth.token.role: 'teacher'
     * @allow (create) Any teacher can create teacher settings.
     *    auth.token.role: 'teacher'
     * @allow (update) Any teacher can update teacher settings.
     *    auth.token.role: 'teacher'
     * @allow (delete) Any teacher can delete teacher settings.
     *    auth.token.role: 'teacher'
     */
    match /teacherSettings/{settingsId} {
        allow get, list: if isSignedIn() && isTeacher();
        allow create, update, delete: if isSignedIn() && isTeacher();
    }

    /**
     * @description Secure prompts created by teachers.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (create) Teacher with UID 'teacher123' can create a prompt under their own user ID.
     *    auth.uid: 'teacher123', request.resource.data.userId: 'teacher123'
     * @deny (create) Teacher with UID 'teacher123' cannot create a prompt under another user's ID.
     *    auth.uid: 'teacher123', request.resource.data.userId: 'teacher456'
     * @allow (get) Teacher with UID 'teacher123' can read a prompt under their own user ID.
     *    auth.uid: 'teacher123'
     * @deny (get) Teacher with UID 'teacher123' cannot read a prompt under another user's ID.
     *    auth.uid: 'teacher456'
     * @allow (update) Teacher with UID 'teacher123' can update a prompt under their own user ID.
     *    auth.uid: 'teacher123'
     * @deny (update) Teacher with UID 'teacher123' cannot update a prompt under another user's ID.
     *    auth.uid: 'teacher456'
     * @allow (delete) Teacher with UID 'teacher123' can delete a prompt under their own user ID.
     *    auth.uid: 'teacher123'
     * @deny (delete) Teacher with UID 'teacher123' cannot delete a prompt under another user's ID.
     *    auth.uid: 'teacher456'
     * @principle Enforces document ownership for writes, and restricts access to a user's own data tree.
     */
    match /users/{userId}/prompts/{promptId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && isPromptCreationValid(userId);
      allow update: if isExistingOwner(userId) && isPromptOwner(userId);
      allow delete: if isExistingOwner(userId) && isPromptOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    function isSelfCreation(userId) {
      return request.auth.uid == userId && request.resource.data.uid == userId;
    }

    function isPromptCreationValid(userId){
        return request.auth.uid == userId && request.resource.data.userId == userId;
    }

    function isPromptOwner(userId) {
        return request.resource.data.userId == userId;
    }

    function isTeacher() {
      return isSignedIn() && (request.auth.token.role == 'teacher');
    }
  }
}