/**
 * @fileoverview Firestore Security Rules for the Lyra application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and teacher-created prompts.
 * It ensures that only authenticated users can access their own data, while teachers can manage their customized AI prompts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with each document ID matching the Firebase Auth UID.
 * - /teacherSettings/{settingsId}: Stores AI customization settings for teachers.
 * - /users/{userId}/prompts/{promptId}: Stores prompts created by teachers, nested under their user ID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teachers can create, read, update, and delete their own prompts.
 * - Listing of all users is disallowed to protect user privacy.
 * - The `teacherId` is stored within each prompt document to simplify ownership checks and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     *   Example (create): User with UID "user123" can create a profile at /users/user123.
     * @deny (get, create, update, delete) if the request is made by a different user or unauthenticated user.
     *   Example (create): User with UID "user456" cannot create a profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures teacher settings. Anyone can read. Only teachers can create, update, or delete settings.
     * @path /teacherSettings/{settingsId}
     * @allow (get, list) Allow anyone to get or list TeacherSettings
     *   Example (get): Any user can read /teacherSettings/math_teacher123.
     * @allow (create, update, delete) if the request is made by a teacher with matching teacherId in document.
     *   Example (create): Teacher with UID "teacher123" can create settings at /teacherSettings/teacher123_math if teacherId in document is also "teacher123".
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     *   Example (create): User with UID "student456" cannot create settings at /teacherSettings/student456_math.
     * @principle Enforces document ownership for writes, public read.
     */
    match /teacherSettings/{settingsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.teacherId;
      allow update: if isSignedIn() && request.auth.uid == request.resource.data.teacherId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.teacherId;
    }

    /**
     * @description Secures prompts created by teachers. Each teacher can only access their own prompts.
     * @path /users/{userId}/prompts/{promptId}
     * @allow (get, list) if the request is made by the teacher with matching {userId}.
     *   Example (get): Teacher with UID "teacher123" can read a prompt at /users/teacher123/prompts/prompt001.
     * @allow (create, update, delete) if the request is made by the teacher with matching {userId} and the prompt's userId matches {userId}.
     *   Example (create): Teacher with UID "teacher123" can create a prompt at /users/teacher123/prompts/prompt002 with userId "teacher123".
     * @deny (get, create, update, delete) if the request is made by a different user or unauthenticated user.
     *   Example (get): Teacher with UID "teacher456" cannot read a prompt at /users/teacher123/prompts/prompt001.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/prompts/{promptId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == request.resource.data.teacherId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == resource.data.teacherId;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}